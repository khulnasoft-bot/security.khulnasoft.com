import Link from "next/link"
import { fetchVulnerabilityById } from "@/lib/vuln-list"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { SeverityBadge } from "@/components/severity-badge"
import { notFound } from "next/navigation"

export default async function VulnerabilityDetailPage({ params }: { params: { id: string } }) {
  const id = decodeURIComponent(params.id)
  const vuln = await fetchVulnerabilityById(id)
  if (!vuln) return notFound()

  return (
    <main className="container mx-auto px-4 py-8">
      <div className="mb-4">
        <Link href="/vulnerabilities" className="text-sm text-primary underline-offset-4 hover:underline">
          ‚Üê Back to list
        </Link>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex flex-wrap items-center gap-3">
            <span className="truncate">{vuln.title}</span>
            <SeverityBadge score={vuln.severity} />
            <Badge variant="outline">{vuln.source.toUpperCase()}</Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="text-sm grid grid-cols-1 sm:grid-cols-2 gap-3">
            <div>
              <div className="text-muted-foreground">ID</div>
              <div className="font-medium">{vuln.id}</div>
            </div>
            {vuln.cve && (
              <div>
                <div className="text-muted-foreground">CVE</div>
                <div className="font-medium">{vuln.cve}</div>
              </div>
            )}
            {vuln.cvss && (
              <div>
                <div className="text-muted-foreground">CVSS</div>
                <div className="font-medium">{vuln.cvss}</div>
              </div>
            )}
            {vuln.cwe && (
              <div>
                <div className="text-muted-foreground">CWE</div>
                <div className="font-medium">{vuln.cwe}</div>
              </div>
            )}
            <div>
              <div className="text-muted-foreground">Published</div>
              <div className="font-medium">
                <time dateTime={vuln.published || vuln.updated}>
                  {(vuln.published || vuln.updated || "").replace("T", " ").replace("Z", "")}
                </time>
              </div>
            </div>
            <div>
              <div className="text-muted-foreground">Updated</div>
              <div className="font-medium">
                <time dateTime={vuln.updated || vuln.published}>
                  {(vuln.updated || vuln.published || "").replace("T", " ").replace("Z", "")}
                </time>
              </div>
            </div>
            {vuln.affects?.length > 0 && (
              <div className="sm:col-span-2">
                <div className="text-muted-foreground">Affects</div>
                <div className="flex flex-wrap gap-2 mt-1">
                  {vuln.affects.map((pkg) => (
                    <Badge key={pkg} variant="outline">
                      {pkg}
                    </Badge>
                  ))}
                </div>
              </div>
            )}
          </div>

          {vuln.description && (
            <section>
              <h3 className="font-semibold mb-2">Description</h3>
              <p className="text-sm leading-relaxed whitespace-pre-line">{vuln.description}</p>
            </section>
          )}

          {vuln.references?.length > 0 && (
            <section>
              <h3 className="font-semibold mb-2">References</h3>
              <ul className="list-disc pl-5 space-y-1">
                {vuln.references.map((ref) => (
                  <li key={ref.url}>
                    <a
                      href={ref.url}
                      className="text-primary underline-offset-4 hover:underline break-all"
                      target="_blank"
                      rel="noreferrer noopener"
                    >
                      {ref.title || ref.url}
                    </a>
                  </li>
                ))}
              </ul>
            </section>
          )}

          {vuln.path && (
            <div className="text-xs text-muted-foreground">
              Source file:{" "}
              <a
                href={`https://github.com/${encodeURIComponent(
                  "khulnasoft-lab",
                )}/${encodeURIComponent("vuln-list")}/blob/main/${encodeURIComponent(vuln.path)}`}
                target="_blank"
                rel="noreferrer noopener"
                className="underline underline-offset-4"
              >
                {vuln.path}
              </a>
            </div>
          )}
        </CardContent>
      </Card>
    </main>
  )
}
